const fs = require("fs");

const generateIcons = () => {
  const svgDir : string = `./assets/svgs/`;

  let iconIndexOutput : string = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

`;

let iconMap : IIconMap = {};

let iconStoryOutput : string = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

import { storiesOf } from '@storybook/react-native';
import React, { ReactElement } from 'react';
import { View, ScrollView } from 'react-native';
import { Icon } from '../../src/components/icon';
import { Story, UseCase } from '../views';

storiesOf('Icon', module)
  `;

  // Read root Svg icon directory
  fs.readdirSync(svgDir).forEach(fileName => {
    if (fileName === '.DS_Store') return;

    // globalFileNames.push(fileName);
    iconMap[fileName] = {};
    const subDir = `${svgDir}${fileName}`;

let iconListOutput : string = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

`;
    // Read sub-directory
    return fs.readdirSync(subDir).forEach(subDirFileName => {
      // trim qoutes & .svg off subDirFileName
      let trimmedStr : string = subDirFileName.replace(/(.svg)|-/g, '');
      let svgContent : string = fs.readFileSync(`${subDir}/${subDirFileName}`, 'utf8');
      iconListOutput += `export const ${trimmedStr} = () : any => \`${svgContent}\`;
  `;

    iconMap[fileName][trimmedStr] = () => `<View style={{ width: 75, height: 75, margin: 10 }}><Icon icon="${trimmedStr}" /></View>`;

    iconIndexOutput += `export { ${trimmedStr} } from './${fileName}'
  `;
    
    fs.writeFileSync(`./assets/xml/${fileName}.ts`, iconListOutput);
    fs.writeFileSync(`./assets/xml/index.ts`, iconIndexOutput);
    });
  });
  Object.keys(iconMap).map(category => {
    iconStoryOutput += `
      .add('${category}', () : ReactElement => (
        <Story>
          <UseCase
            text="Icon => ${category}"
          >
            <ScrollView>
              <View
                style={{
                  flex: 1,
                  flexDirection: 'row',
                  flexWrap: 'wrap',
                }}
              >
                ${Object.values(iconMap[category]).map(value => value()).join('')}
              </View>
            </ScrollView>
          </UseCase>
        </Story>
      ))
    `;
  });
  fs.writeFileSync(`./__stories__/story/icon-auto.story.tsx`, iconStoryOutput);
};

generateIcons();

interface IIconDetailMap {
  /**
   *
   */
  [key : string] : () => string;
}

interface IIconMap {
  /**
   *
   */
  [key : string] : IIconDetailMap;
}
