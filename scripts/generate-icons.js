const fs = require("fs");

const generateIcons = () => {
  const svgDir = `./assets/svgs/`;
  const svgExportDir = `./assets/xml/icon-list.js`;

  let iconIndexOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

`;

let iconFolderNameOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

export const folderNames : any = [
  `;

let iconNameOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

export const iconNames : any = [
  `;

let iconMap = {};

// let globalFileNames = [];

let iconStoryOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

import { storiesOf } from '@storybook/react-native';
import React, { ReactElement } from 'react';
import { View, ScrollView } from 'react-native';
import { Icon } from '../../src/components/icon';
import { Story, UseCase } from '../views';

storiesOf('Icon', module)
  `;

let iconComponentOutput = ` 
`;

  // Read root Svg icon directory
  fs.readdirSync(svgDir).forEach(fileName => {
    if (fileName === '.DS_Store') return;

    // globalFileNames.push(fileName);
    iconMap[fileName] = {};
    const subDir = `${svgDir}${fileName}`;
    iconFolderNameOutput += `'${fileName}',
  `;

let iconListOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

`;
    // Read sub-directory
    return fs.readdirSync(subDir).forEach(subDirFileName => {
      // trim qoutes & .svg off subDirFileName
      let trimmedStr = subDirFileName.replace(/(.svg)|-/g, '');
      let svgContent = fs.readFileSync(`${subDir}/${subDirFileName}`, 'utf8');
      iconListOutput += `export const ${trimmedStr} = () : any => \`${svgContent}\`;
  `;

    iconMap[fileName][trimmedStr] = () => `<View style={{ width: 75, height: 75, margin: 10 }}><Icon icon="${trimmedStr}" /></View>`;

    iconIndexOutput += `export { ${trimmedStr} } from './${fileName}'
  `;

    iconNameOutput += `'${trimmedStr}',
  `;

    iconComponentOutput += `
      <Icon icon="${trimmedStr}" />`;
    
    fs.writeFileSync(`./assets/xml/${fileName}.ts`, iconListOutput);
    fs.writeFileSync(`./assets/xml/index.ts`, iconIndexOutput);
    fs.writeFileSync(`./assets/xml/folder-names.ts`, iconFolderNameOutput);
    });
    iconComponentOutput = ` 
`;
  });
  iconNameOutput += `];
`;
  fs.writeFileSync(`./assets/xml/icon-names.ts`, iconNameOutput);
  iconFolderNameOutput += `];
`;
// globalFileNames.forEach((fileName) => {
//   iconStoryOutput += `
// .add('${fileName}', () : ReactElement => (
//   <Story>
//     <UseCase
//       text="Icon => ${fileName}"
//     >
//       ${iconComponentOutput}
//     </UseCase>
//   </Story>
// ))
// `;
// });
Object.keys(iconMap).map(category => {
  iconStoryOutput += `
    .add('${category}', () : ReactElement => (
      <Story>
        <UseCase
          text="Icon => ${category}"
        >
          <ScrollView>
            <View
              style={{
                flex: 1,
                flexDirection: 'row',
                flexWrap: 'wrap',
              }}
            >
              ${Object.values(iconMap[category]).map(value => value()).join('')}
            </View>
          </ScrollView>
        </UseCase>
      </Story>
    ))
  `;
});
fs.writeFileSync(`./__stories__/story/icon-auto.story.tsx`, iconStoryOutput);
// console.log('map', iconMap);
};

generateIcons();
